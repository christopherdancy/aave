"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenderlyRPC = void 0;
const fs_1 = __importDefault(require("fs"));
const yaml = __importStar(require("js-yaml"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const TenderlyApiService_1 = require("./tenderly/TenderlyApiService");
const TenderlyService_1 = require("./tenderly/TenderlyService");
const util_1 = require("./util");
class TenderlyRPC {
    constructor(hre) {
        this.filepath = os_1.default.homedir() + path_1.default.sep + ".tenderly" + path_1.default.sep + "config.yaml";
        this.env = hre;
        this.connected = true;
        const fileData = fs_1.default.readFileSync(this.filepath);
        const yamlData = yaml.load(fileData.toString());
        this.accessKey = yamlData.access_key;
        this.tenderlyAPI = TenderlyApiService_1.TenderlyApiService.configureTenderlyRPCInstance();
        this.host = this.tenderlyAPI.defaults.baseURL;
    }
    supportsSubscriptions() {
        return false;
    }
    disconnect() {
        return true;
    }
    async send(payload, cb) {
        if (this.head === undefined) {
            await this.initializeFork();
        }
        try {
            this.tenderlyAPI.defaults.headers.Head = this.head;
            const resp = await this.tenderlyAPI.post("", payload);
            this.head = resp.headers.head;
            this.writeHead();
            cb(null, resp.data);
        }
        catch (err) {
            console.log(err.response.data);
            cb(err.response.data);
        }
    }
    resetFork() {
        const fileData = fs_1.default.readFileSync(this.filepath);
        const yamlData = yaml.load(fileData.toString());
        const oldHead = yamlData.head;
        delete yamlData.head;
        delete yamlData.fork;
        fs_1.default.writeFileSync(this.filepath, yaml.safeDump(yamlData), "utf8");
        return oldHead;
    }
    async verify(...contracts) {
        if (this.head === undefined) {
            await this.initializeFork();
        }
        const flatContracts = contracts.reduce((accumulator, value) => accumulator.concat(value), []);
        const requestData = await this.filterContracts(flatContracts);
        if (requestData == null) {
            console.log("Fork verification failed");
            return;
        }
        try {
            await TenderlyService_1.TenderlyService.verifyForkContracts(requestData, this.env.config.tenderly.project, this.env.config.tenderly.username, this.fork);
        }
        catch (err) {
            console.log(err.message);
        }
    }
    getHead() {
        return this.head;
    }
    setHead(head) {
        this.head = head;
    }
    getFork() {
        return this.fork;
    }
    setFork(fork) {
        this.fork = fork;
    }
    async initializeFork() {
        const username = this.env.config.tenderly.username;
        const projectID = this.env.config.tenderly.project;
        try {
            const resp = await this.tenderlyAPI.post(`/account/${username}/project/${projectID}/fork`, { network_id: this.env.config.tenderly.forkNetwork });
            this.head = resp.data.root_transaction.id;
            this.accounts = resp.data.simulation_fork.accounts;
            this.fork = resp.data.simulation_fork.id;
        }
        catch (err) {
            throw err;
        }
    }
    writeHead() {
        const fileData = fs_1.default.readFileSync(this.filepath);
        const yamlData = yaml.load(fileData.toString());
        yamlData.head = this.head;
        fs_1.default.writeFileSync(this.filepath, yaml.safeDump(yamlData), "utf8");
    }
    async filterContracts(flatContracts) {
        let contract;
        const requestData = await this.getForkContractData();
        for (contract of flatContracts) {
            const index = requestData.contracts.findIndex(requestContract => requestContract.contractName === contract.name);
            if (index === -1) {
                continue;
            }
            requestData.contracts[index].networks = {
                [this.fork]: {
                    address: contract.address
                }
            };
        }
        return requestData;
    }
    async getForkContractData() {
        const config = this.env.config;
        const contracts = await util_1.getContracts(this.env);
        const solcConfig = {
            compiler_version: config.solidity.compilers[0].version,
            optimizations_used: config.solidity.compilers[0].settings.optimizer.enabled,
            optimizations_count: config.solidity.compilers[0].settings.optimizer.runs,
            evm_version: config.solidity.compilers[0].settings.evmVersion
        };
        return {
            contracts,
            config: solcConfig,
            root: this.head
        };
    }
}
exports.TenderlyRPC = TenderlyRPC;
//# sourceMappingURL=TenderlyRPC.js.map